import pygame
import time
import random

pygame.init()

red = (255,0,0)
green = (0,255,0)
black = (0,0,0)

display_width = 600
display_height = 600

s = pygame.display.set_mode((display_width,display_height))
pygame.display.set_caption("Snake Game")

clock = pygame.time.Clock()

block_size = 10

FPS = 24

font = pygame.font.SysFont(None, 24)

def snake(block_size, snakelist):
    for XnY in snakelist:
        pygame.draw.rect(s, green, [XnY[0],XnY[1],block_size,block_size])

def message_to_screen(msg, color):
    screen_text = font.render(msg, True, color)
    s.blit(screen_text, [display_width/4,display_height/2])

def gameLoop():
    gameExit = False
    gameOver = False
    
    #head of the snake
    lead_x = display_width/2
    lead_y = display_height/2
    
    lead_x_change = 0
    lead_y_change = 0

    snakelist = []
    snakelength = 1

    #This is to make sure the apple x and y location are multiples of 10
    randAppleX = round(random.randrange(0, display_width-block_size)/10.0) * 10.0 
    randAppleY = round(random.randrange(0, display_height-block_size)/10.0) * 10.0
    
    while not gameExit:

        while gameOver == True:
            s.fill(black)
            message_to_screen("Game over, press R to play again or Q to quit", red)
            pygame.display.update()

            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_q:
                        gameExit = True
                        gameOver = False
                    if event.key == pygame.K_r:
                        gameLoop()

        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                gameExit = True
        #Arrow keys  
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    lead_x_change = -block_size
                    lead_y_change = 0
                elif event.key == pygame.K_RIGHT:
                    lead_x_change = block_size
                    lead_y_change = 0
                elif event.key == pygame.K_UP:
                    lead_y_change = -block_size
                    lead_x_change = 0
                elif event.key == pygame.K_DOWN:
                    lead_y_change = block_size
                    lead_x_change = 0

        #Boundries
        if lead_x >= display_width or lead_x <= 0 or lead_y >= display_height or lead_y <= 0:
            gameOver = True

        lead_x += lead_x_change
        lead_y += lead_y_change

        s.fill(black)
        #apple
        pygame.draw.rect(s, red, [randAppleX,randAppleY, block_size,block_size])
        #snake
        
        snakehead = []
        snakehead.append(lead_x)
        snakehead.append(lead_y)
        snakelist.append(snakehead)

        if len(snakelist) > snakelength:
            del snakelist[0]

        for eachSegment in snakelist[:-1]:
            if eachSegment == snakehead:
                gameOver = True
        snake(block_size, snakelist)
        
        pygame.display.update()

        if lead_x == randAppleX and lead_y == randAppleY:
            randAppleX = round(random.randrange(0, display_width-block_size)/10.0) * 10.0 
            randAppleY = round(random.randrange(0, display_height-block_size)/10.0) * 10.0
            snakelength += 1

        clock.tick(FPS)

    pygame.quit()
    quit()

gameLoop()
